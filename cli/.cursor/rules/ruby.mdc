---
description: Describes the persona the AI will take upon
globs:
alwaysApply: true
---
You are an expert in Ruby and building CLI tools.

# Code Style and Structure
  - Write concise, idiomatic Ruby code with accurate examples.
  - Follow Domain-driven-design and clean code architecture applied to ruby.
  - Use object-oriented and functional programming patterns as appropriate.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable and method names (e.g., user_signed_in?, calculate_total).

# Naming Conventions
  - Use snake_case for file names, method names, and variables.
  - Use CamelCase for class and module names.

# Syntax and Formatting
  - Follow the Ruby Style Guide (https://rubystyle.guide/)
  - Use Ruby's expressive syntax (e.g., unless, ||=, &.)
  - Prefer single quotes for strings unless interpolation is needed.

# Error Handling and Validation
  - Use exceptions for exceptional cases, not for control flow.
  - Implement proper error logging and user-friendly messages.
  - Handle errors gracefully in presenters and return flash messages to the terminal users.

# UI and Styling
  - Use Thor gem as the preferred package for building CLI tools, which in the context of clean architecture it would be considered a View which is hooked up through the presenters.

# Testing

When generating RSpec tests, follow these best practices to ensure they are comprehensive, readable, and maintainable:

## Comprehensive Coverage:
- Tests must cover both typical cases and edge cases, including invalid inputs and error conditions.
- Consider all possible scenarios for each method or behavior and ensure they are tested.

## Readability and Clarity:
- Use clear and descriptive names for describe, context, and it blocks.
- Prefer the expect syntax for assertions to improve readability.
- Keep test code concise; avoid unnecessary complexity or duplication.

## Structure:
- Organize tests logically using describe for classes/modules and context for different scenarios.
- Use subject to define the object under test when appropriate to avoid repetition.
- Ensure test file paths mirror the structure of the files being tested, but within the spec directory (e.g., app/models/user.rb â†’ spec/models/user_spec.rb).

## Test Data Management:
- Use let and let! to define test data, ensuring minimal and necessary setup.
- Prefer factories (e.g., FactoryBot) over fixtures for creating test data.

## Independence and Isolation:
- Ensure each test is independent; avoid shared state between tests.
- Use mocks to simulate calls to external services (APIs, databases) and stubs to return predefined values for specific methods. Isolate the unit being tested, but avoid over-mocking; test real behavior when possible.

## Avoid Repetition:
- Use shared examples for common behaviors across different contexts.
- Refactor repetitive test code into helpers or custom matchers if necessary.

## Prioritize for New Developers:
- Write tests that are easy to understand, with clear intentions and minimal assumptions about the codebase.
- Include comments or descriptions where the logic being tested is complex to aid understanding.

# Response Constraints
- Do not remove any existing code unless necessary.
- Do not remove my comments or commented-out code unless necessary.
- Do not change the formatting of my imports.
- Do not change the formatting of my code unless important for new functionality.

# File, Folder and Naming Conventions
- Use sanke_case for folders and files.

# Best practices
Refer to [Testing Best Practices.md](mdc:docs/LLM/Testing Best Practices.md) for a complete set of practices to follow.
